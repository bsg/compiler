fn add(a: u32, b: u32) -> u32 {
    return a + b;
}

fn add_by_ref(a: *u32, b: *u32) -> u32 {
    return *a + *b;
}

fn max(a: u32, b: u32) -> u32 {
    if a > b {
        return a;
    } else {
        return b;
    }
}

fn sum_range(start: u32, end: u32) -> u32 {
    let n: u32 = start;
    let sum: u32 = 0;
    
    while n < end + 1 {
        sum = sum + n;
        n = n + 1;
    }

    return sum;
}

fn main(argc: u32) -> u32 {
    let a: u32;
    a = 100;
    let c1: bool = 1000 > a;
    let c2: bool = 10 > argc;
    let p: *u32 = &argc;
    *p = max(1, 10);

    if c1 {
        if c2 {
            a = sum_range(0, 10);
        } else {
            a = 2;
        }
    }

    return add_by_ref(&argc, &a);
}

// fn add_different_types(a: u32, b: u8) -> u16 {
//     return a + b;
// }