// --------------------------------------------------------------------------------------------------------------------
// BEGIN BINDINGS
// --------------------------------------------------------------------------------------------------------------------

const SDL_INIT_TIMER:         u32 = 0x00000001;
const SDL_INIT_AUDIO:         u32 = 0x00000010;
const SDL_INIT_VIDEO:         u32 = 0x00000020;

// TODO enum
const SDL_SCANCODE_A:         u32 = 4;
const SDL_SCANCODE_B:         u32 = 5;
const SDL_SCANCODE_C:         u32 = 6;
const SDL_SCANCODE_D:         u32 = 7;
const SDL_SCANCODE_E:         u32 = 8;
const SDL_SCANCODE_F:         u32 = 9;
const SDL_SCANCODE_G:         u32 = 10;
const SDL_SCANCODE_H:         u32 = 11;
const SDL_SCANCODE_I:         u32 = 12;
const SDL_SCANCODE_J:         u32 = 13;
const SDL_SCANCODE_K:         u32 = 14;
const SDL_SCANCODE_L:         u32 = 15;
const SDL_SCANCODE_M:         u32 = 16;
const SDL_SCANCODE_N:         u32 = 17;
const SDL_SCANCODE_O:         u32 = 18;
const SDL_SCANCODE_P:         u32 = 19;
const SDL_SCANCODE_Q:         u32 = 20;
const SDL_SCANCODE_R:         u32 = 21;
const SDL_SCANCODE_S:         u32 = 22;
const SDL_SCANCODE_T:         u32 = 23;
const SDL_SCANCODE_U:         u32 = 24;
const SDL_SCANCODE_V:         u32 = 25;
const SDL_SCANCODE_W:         u32 = 26;
const SDL_SCANCODE_X:         u32 = 27;
const SDL_SCANCODE_Y:         u32 = 28;
const SDL_SCANCODE_Z:         u32 = 29;
const SDL_SCANCODE_1:         u32 = 30;
const SDL_SCANCODE_2:         u32 = 31;
const SDL_SCANCODE_3:         u32 = 32;
const SDL_SCANCODE_4:         u32 = 33;
const SDL_SCANCODE_5:         u32 = 34;
const SDL_SCANCODE_6:         u32 = 35;
const SDL_SCANCODE_7:         u32 = 36;
const SDL_SCANCODE_8:         u32 = 37;
const SDL_SCANCODE_9:         u32 = 38;
const SDL_SCANCODE_0:         u32 = 39;
const SDL_SCANCODE_RETURN:    u32 = 40;
const SDL_SCANCODE_ESCAPE:    u32 = 41;
const SDL_SCANCODE_BACKSPACE: u32 = 42;
const SDL_SCANCODE_TAB:       u32 = 43;
const SDL_SCANCODE_SPACE:     u32 = 44;

const SDL_QUIT:               u32 = 0x100;
const SDL_KEYDOWN:            u32 = 0x300;
const SDL_KEYUP:              u32 = 0x301;

struct SDL_RendererInfo {
    name: *u8;                   // The name of the renderer
    flags: u32;                  // Supported SDL_RendererFlags
    num_texture_formats: u32;    // The number of available texture formats
    texture_formats: [u32; 16];  // The available texture formats
    max_texture_width: i32;      // The maximum texture width
    max_texture_height: i32;     // The maximum texture height
}

struct SDL_Keysym {
    scancode: u32;
    sym: u32;
    mod: u16;
    unused: u32;
}

struct SDL_KeyboardEvent {
    type: u32;
    timestamp: u32;
    window_id: u32;
    state: u8;
    repeat: u8;
    padding2: u8;
    padding3: u8;
    keysym: SDL_Keysym;
}

struct SDL_Event {
    type: u32;
    // TODO the rest, once we have unions
    _padding: [u8; 52];
}

struct SDL_Rect {
    x: u32;
    y: u32;
    w: u32;
    h: u32;
}
// TODO
// type Rect = SDL_Rect;

// TODO SDL docs are misleading, look into SDL_MapRGBA
// TODO also should be able to cast this into a u32?
// #[packed]
// struct SDL_Color {
//     r: u8;
//     g: u8;
//     b: u8;
//     a: u8;
// }

struct SDL_Window {}
struct SDL_Renderer {}
struct SDL_Surface {}
struct SDL_Texture {}
struct TTF_Font {}
struct Mix_Music {}
struct Mix_Chunk {}

struct timezone_t {}
struct timeval_t {
    tv_sec: u64;
    tv_usec: u64;
}

// TODO some of these need usize
extern "C" {
    fn malloc(size: u32) -> *u8;
    fn realloc(ptr: *u8, new_size: u32) -> *u8;
    fn memcpy(dest: *u8, src: *u8, n: u32) -> *u8;
    fn free(ptr: *u8);
    fn exit(status: u32);
    fn sleep(seconds: u32) -> u32;
    fn putchar (c: u32) -> i32;
    fn puts(s: *i8) -> i32;
    fn random() -> u32;
    fn gettimeofday(tv: *timeval_t, tz: *timezone_t) -> u32;
    fn SDL_Init(flags: u32) -> i32;
    fn SDL_SetHint(name: *u8, value: *u8) -> u32;
    fn SDL_CreateWindow(title: *u8, x: u32, y: u32, w: u32, h: u32, flags: u32) -> *SDL_Window;
    fn SDL_PollEvent(ev: *u32) -> u32;
    fn SDL_GetWindowSurface(window: *u8) -> *SDL_Surface;
    fn SDL_UpdateWindowSurface(window: *u8) -> u32;
    fn SDL_GetError() -> *u8;
    fn SDL_ClearError();
    fn SDL_CreateRenderer(window: *SDL_Window, index: i32, flags: u32) -> *SDL_Renderer;
    fn SDL_GetRendererInfo(renderer: *SDL_Renderer, info: &SDL_RendererInfo) -> i32;
    fn SDL_RenderCopy(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_Rect, dstrect: *SDL_Rect) -> u32;
    fn SDL_CreateTextureFromSurface(renderer: *SDL_Renderer, surface: *SDL_Surface) -> *SDL_Texture;
    fn SDL_FreeSurface(surface: *SDL_Surface);
    fn SDL_DestroyTexture(texture: *SDL_Texture);
    fn SDL_RenderPresent(renderer: *SDL_Renderer);
    fn SDL_Delay(ms: u32);
    fn SDL_RenderClear(renderer: *SDL_Renderer) -> u32;
    fn SDL_QueryTexture(texture: *SDL_Texture, format: *u32, access: *u32, w: *u32, h: *u32) -> u32;
    fn SDL_GL_SetAttribute(attr: u32, value: i32) -> i32;
    fn SDL_GL_CreateContext(window: *SDL_Window) -> *u8;
    fn IMG_Init(flags: i32) -> i32;
    fn IMG_Load(file: *u8) -> *SDL_Surface;
    fn TTF_Init() -> u32;
    fn TTF_OpenFont(file: *u8, ptsize: u32) -> *TTF_Font;
    fn TTF_RenderText_Solid(font: *TTF_Font, text: *u8, fg: u32) -> *SDL_Surface;
    fn Mix_OpenAudio(frequency: u32, format: u16, channels: u32, chunksize: u32) -> u32;
    fn Mix_LoadMUS(file: *u8) -> *Mix_Music;
    fn Mix_LoadWAV(file: *u8) -> *Mix_Chunk;
    fn Mix_PlayChannel(channel: u32, chunk: *Mix_Chunk, loops: u32) -> u32;
}
// --------------------------------------------------------------------------------------------------------------------
// END BINDINGS
// --------------------------------------------------------------------------------------------------------------------

fn abort(msg: &u8) {
    puts(msg);
    exit(1);
}

// TODO fn sdl_nullcheck(ptr: *Any) ?
fn sdl_nullcheck<T>(ptr: *T) {
    if ptr == nullptr {
        abort(SDL_GetError());
    }
}

fn rand_range(lower: u32, upper: u32) -> u32 {
    return random() % (upper + 1 - lower) + lower;
}

fn itoa(n: u32, buf: *u8) {
    if n == 0 {
        *buf = '0';
        buf += 1;
        *buf = 0;
    } else {
        let divisor: u32 = 1000000000;

        while n / divisor == 0 {
            divisor /= 10;
        }

        divisor *= 10;

        while divisor != 1 {
            *buf = ((n % divisor) / divisor / 10 + 48);
            divisor /= 10;
            buf += 1;
        }

        *buf = 0;
    }
}

struct Vec2 {
    x: i32;
    y: i32;
}

struct Sprite {
    tile_x: u32;
    tile_y: u32;
    tile_w: u32;
    tile_h: u32;
}

struct SpriteSheet {
    tile_size: u32;
    tex: *SDL_Texture;
}

impl SpriteSheet {
    fn new(tile_size: u32, tex: *SDL_Texture) -> Self {
        return SpriteSheet {
            tile_size: tile_size,
            tex: tex
        };
    }

    fn draw_tile(&self, renderer: *SDL_Renderer, sprite: &Sprite, dstRect: &SDL_Rect) {
        let srcRect: SDL_Rect = SDL_Rect {
            x: sprite.tile_x * self.tile_size,
            y: sprite.tile_y * self.tile_size,
            w: sprite.tile_w * self.tile_size,
            h: sprite.tile_h * self.tile_size
        };

        if SDL_RenderCopy(renderer, self.tex, &srcRect, dstRect) < 0 {
            puts(SDL_GetError());
        }
    }
}

struct InputState {
    up: bool;
    down: bool;
    left: bool;
    right: bool;
    shoot: bool;
}

impl InputState {
    fn new() -> Self {
        let input: InputState;
        input.up = false;
        input.down = false;
        input.left = false;
        input.right = false;
        input.shoot = false;
        return input;
    }
}

struct Player {
    pos: Vec2;
    sprite: Sprite;
    w: u32;
    h: u32;
    speed: u32;
    anim_state: u32;
    anim_ticks_left: u32;
    shoot_cooldown: u32;
    shoot_ticks_left: u32;
}

struct Bullet {
    is_alive: bool;
    pos: Vec2;
}

struct Enemy {
    is_alive: bool;
    pos: Vec2;
    velocity: Vec2;
}

struct Particle {
    is_alive: bool;
    pos: Vec2;
    speed: u32;
}

struct EntityList<T> {
    len: u32;
    cap: u32;
    ptr: *T;
}

// TODO iter()
impl<T> EntityList<T> {
    fn new_with_capacity(cap: u32) -> Self {
        return EntityList::<T> {
            len: 0,
            cap: cap,
            ptr: malloc(size_of::<T>() * cap)
        };
    }

    fn get(&self, id: u32) -> &T {
        if self.ptr != nullptr && id < self.len {
            return self.ptr + id;
        }
        return nullptr;
    }

    fn kill(&self, id: u32) {
        self.get(id).is_alive = false;
    }

    fn spawn(&self, entity: &T) -> u32 {
        let idx: u32 = 0;
        if self.len < self.cap {
            idx = self.len;
            self.len += 1;
        } else {
            while idx < self.len {
                if !self.get(idx).is_alive {
                    break;
                } else {
                    idx += 1;
                }
            }
        }
        
        if self.ptr != nullptr && idx < self.len {
            memcpy(self.ptr + idx, entity, size_of::<T>());
        }

        return idx;
    }

    fn despawn(&self, id: u32) {
        self.get(id).is_alive = false;
    }

    fn for_each<Ctx>(&self, f: fn(u32, &Ctx, &T) -> void, ctx: &Ctx) {
        let i: u32 = 0;
        while i < self.len {
            let entity: &T = self.get(i);
            if entity.is_alive {
                f(i, ctx, entity);
            }
            i += 1;
        }
    }
}

struct GameContext {
    window_w: u32;
    window_h: u32;
    renderer: *SDL_Renderer;
    spritesheet: SpriteSheet;
    font: *TTF_Font;
    sfx_pew: *Mix_Chunk;
    sfx_explosion: *Mix_Chunk;
    score: u32;
    enemies: EntityList<Enemy>;
    bullets: EntityList<Bullet>;
    particles: EntityList<Particle>;
    enemy_spawn_cooldown: u32;
    enemy_spawn_ticks_left: u32;
    particle_spawn_cooldown: u32;
    particle_spawn_ticks_left: u32;
}

const BULLET_SPEED: u32 = 6;

fn main(argc: u32) -> u32 {
    puts("schüt");

    let ctx: GameContext = GameContext {window_w: 400, window_h: 600, score: 0};

    SDL_SetHint("SDL_HINT_RENDER_DRIVER", "opengl");

    if SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO) < 0 as i32 {
        abort(SDL_GetError());
    } 

    if IMG_Init(2) < 0 as i32 {
        abort(SDL_GetError());
    }

    if TTF_Init() < 0 as u32 {
        abort(SDL_GetError());
    }

    if Mix_OpenAudio(44100, 32784 as u16, 2, 2048) < 0 {
        abort(SDL_GetError());
    }

    let window: *SDL_Window = SDL_CreateWindow("gaem", 800, 400, ctx.window_w, ctx.window_h, 4); // 4 = SDL_WINDOW_SHOWN
    sdl_nullcheck::<SDL_Window>(window);

    // FIXME sdl still won't use opengl...
    SDL_GL_SetAttribute(17, 4); // SDL_GL_CONTEXT_MAJOR_VERSION
    SDL_GL_SetAttribute(18, 1); // SDL_GL_CONTEXT_MINOR_VERSION
    SDL_GL_SetAttribute(21, 1); // SDL_GL_CONTEXT_PROFILE_MASK
    SDL_GL_SetAttribute(13, 1); // SDL_GL_MULTISAMPLEBUFFERS
    SDL_GL_SetAttribute(14, 4); // SDL_GL_MULTISAMPLESAMPLES
    SDL_GL_SetAttribute(6, 24); // SDL_GL_DEPTH_SIZE
    SDL_GL_SetAttribute(5, 1); // SDL_GL_DOUBLEBUFFER
    sdl_nullcheck::<u8>(SDL_GL_CreateContext(window));

    ctx.renderer = SDL_CreateRenderer(window, -1, 2); // 2 = SDL_RENDERER_ACCELERATED
    sdl_nullcheck::<SDL_Renderer>(ctx.renderer);

    let renderer_info: SDL_RendererInfo;
    SDL_GetRendererInfo(ctx.renderer, &renderer_info);
    puts("Renderer: ");
    puts(renderer_info.name);

    let img: *SDL_Surface = IMG_Load("spritesheet.png");
    sdl_nullcheck::<SDL_Surface>(img);

    let texSpritesheet: *SDL_Texture = SDL_CreateTextureFromSurface(ctx.renderer, img);
    sdl_nullcheck::<SDL_Texture>(texSpritesheet);
    SDL_FreeSurface(img);
    
    ctx.spritesheet = SpriteSheet::new(16, texSpritesheet);

    ctx.font = TTF_OpenFont("arcade_n.ttf", 16);
    sdl_nullcheck::<TTF_Font>(ctx.font);

    ctx.sfx_pew = Mix_LoadWAV("pew.wav");
    sdl_nullcheck::<Mix_Chunk>(ctx.sfx_pew);

    ctx.sfx_explosion = Mix_LoadWAV("explosion.wav");
    sdl_nullcheck::<Mix_Chunk>(ctx.sfx_explosion);

    let player: Player = Player {
        sprite: Sprite {tile_x: 0, tile_y: 0, tile_w: 1, tile_h: 1},
        w: 32,
        h: 32,
        speed: 3,
        anim_state: 0,
        anim_ticks_left: 30,
        pos: Vec2 {x: 200, y: ctx.window_h - 32},
        shoot_cooldown: 45,
        shoot_ticks_left: 0
    };

    // TODO type arg inference
    ctx.bullets = EntityList::new_with_capacity::<Bullet>(100);
    ctx.enemies = EntityList::new_with_capacity::<Enemy>(100);
    ctx.particles = EntityList::new_with_capacity::<Particle>(100);

    ctx.enemy_spawn_cooldown = 120;
    ctx.enemy_spawn_ticks_left = 0;

    ctx.particle_spawn_cooldown = 10;
    ctx.particle_spawn_ticks_left = 0;

    let input: InputState = InputState::new();

    let frame_start_time: timeval_t;
    let frame_end_time: timeval_t;
    let ev: SDL_Event;

    while true {
        gettimeofday(&frame_start_time, nullptr);
        while SDL_PollEvent(&ev) == 1 {
            match ev.type {
                SDL_QUIT => exit(0),
                SDL_KEYDOWN | SDL_KEYUP => {
                    // TODO just lost the ability to cast aggregate types. see if there's a zero cost workaround
                    let kbe: SDL_KeyboardEvent = ev;
                    match kbe.keysym.scancode {
                        SDL_SCANCODE_ESCAPE => exit(0),
                        SDL_SCANCODE_W      => input.up    = kbe.type == SDL_KEYDOWN,
                        SDL_SCANCODE_A      => input.left  = kbe.type == SDL_KEYDOWN,
                        SDL_SCANCODE_S      => input.down  = kbe.type == SDL_KEYDOWN,
                        SDL_SCANCODE_D      => input.right = kbe.type == SDL_KEYDOWN,
                        SDL_SCANCODE_SPACE  => input.shoot = kbe.type == SDL_KEYDOWN
                    }
                },
            }
        }
        
        if input.up && player.pos.y > 0 as i32 {
            player.pos.y -= player.speed;
        }
        if input.left && player.pos.x > 0 as i32 {
            player.pos.x -= player.speed;
        }
        if input.down && player.pos.y < (ctx.window_h - player.h) as i32 {
            player.pos.y += player.speed;
        }
        if input.right && player.pos.x < (ctx.window_w - player.w) as i32 {
            player.pos.x += player.speed;
        }
        
        if player.shoot_ticks_left > 0 {
            player.shoot_ticks_left -= 1;
        } else {
            if input.shoot {
                let bullet: Bullet = Bullet {is_alive: true, pos: Vec2 {x: player.pos.x, y: player.pos.y - 20}};
                ctx.bullets.spawn(&bullet);
                player.shoot_ticks_left = player.shoot_cooldown;
                Mix_PlayChannel(-1, ctx.sfx_pew, 0);
            } 
        }

        if ctx.enemy_spawn_ticks_left == 0 {
            let margin_x: u32 = 10;
            let x: u32 = rand_range(margin_x, ctx.window_w - 32 - margin_x);
            let enemy: Enemy = Enemy {
                is_alive: true,
                pos: Vec2 {x: x, y: 0},
                velocity: Vec2 {
                    x: rand_range(-2, 2),
                    y: rand_range(1, 4)
                }
            };
            ctx.enemies.spawn(&enemy);
            ctx.enemy_spawn_ticks_left = rand_range(ctx.enemy_spawn_cooldown, ctx.enemy_spawn_cooldown + 40);
        } else {
            ctx.enemy_spawn_ticks_left -= 1;
        }

        if ctx.particle_spawn_ticks_left == 0 {
            let x: u32 = rand_range(0, ctx.window_w - 32);
            let particle: Particle = Particle {is_alive: true, pos: Vec2 {x: x, y: 0}, speed: rand_range(4, 8)};
            ctx.particles.spawn(&particle);
            ctx.particle_spawn_ticks_left = ctx.particle_spawn_cooldown;
        } else {
            ctx.particle_spawn_ticks_left -= 1;
        }

        SDL_RenderClear(ctx.renderer);

        if player.anim_ticks_left == 0 {
            if player.anim_state == 0 {
                player.anim_state = 1;
                player.sprite.tile_x = 1;
            } else {
                player.anim_state = 0;
                player.sprite.tile_x = 0;
            }
            player.anim_ticks_left = 30; 
        } else {
            player.anim_ticks_left -= 1;
        }

        ctx.spritesheet.draw_tile(
            ctx.renderer,
            &player.sprite,
            &SDL_Rect {x: player.pos.x, y: player.pos.y, w: player.w, h: player.h}
        );

        // NOTE fn type args will be inferred at some point. until then, ::<> ~ ~ ~ 
        ctx.particles.for_each::<GameContext>(update_and_render_particle, &ctx);
        ctx.enemies.for_each::<GameContext>(update_and_render_enemy, &ctx);
        ctx.bullets.for_each::<GameContext>(update_and_render_bullet, &ctx);

        // TODO exponential decay, once we have floats and pow
        ctx.enemy_spawn_cooldown = 80 - ctx.score / 10;

        // Render score
        let score_buf: [u8; 16];
        itoa(ctx.score, &score_buf);
        // FIXME something here got fucked possibly after the LLVM IR emit refactor
        // if you substitute a string literal in place of &score_buf, it works
        let surface_text: *SDL_Surface = TTF_RenderText_Solid(ctx.font, &score_buf, 0xFFFFFFFF);
        let tex_score: *SDL_Texture = SDL_CreateTextureFromSurface(ctx.renderer, surface_text);
        let w: u32;
        let h: u32;
        SDL_QueryTexture(tex_score, nullptr, nullptr, &w, &h);
        let rect: SDL_Rect = SDL_Rect {x: ctx.window_w / 2 - w / 2, y: 10, w: w, h: h};
        SDL_RenderCopy(ctx.renderer, tex_score, nullptr, &rect);
        SDL_FreeSurface(surface_text);
        SDL_DestroyTexture(tex_score);

        SDL_RenderPresent(ctx.renderer);

        gettimeofday(&frame_end_time, nullptr);
        let frame_time_ms: u32 = (frame_end_time.tv_usec - frame_start_time.tv_usec) as u32 / 1000;
        // TODO saturating sub
        if frame_time_ms < 16 {
            SDL_Delay(16 - frame_time_ms);
        }
    }

    return 0;
}

fn aabb(a: SDL_Rect, b: SDL_Rect) -> bool {
    //ctx; FIXME the fuck?
    return
        a.x < b.x + b.w &&
        a.x + a.w > b.x &&
        a.y < b.y + b.h &&
        a.y + a.h > b.y;
}

fn update_and_render_enemy(idx: u32, ctx: &GameContext, enemy: &Enemy) {
    let sprite: Sprite = Sprite {tile_x: 3, tile_y: 0, tile_w: 1, tile_h: 1};

    // TODO closures would be nice for this kinda stuff
    let bullet_idx: u32 = 0;
    while bullet_idx < ctx.bullets.len {
        let bullet: &Bullet = ctx.bullets.get(bullet_idx);
        if bullet.is_alive {  
            if aabb(
                SDL_Rect {x: enemy.pos.x, y: enemy.pos.y, w: 32, h: 32},
                SDL_Rect {x: bullet.pos.x, y: bullet.pos.y, w: 16, h: 16})
            {
                enemy.is_alive = false;
                bullet.is_alive = false;

                Mix_PlayChannel(-1, ctx.sfx_explosion, 0);
                ctx.score += 10;
            }
        }
        bullet_idx += 1;
    }

    enemy.pos.x += enemy.velocity.x;
    enemy.pos.y += enemy.velocity.y;

    if enemy.pos.x < 0 as i32 && enemy.velocity.x < 0 as i32 {
        enemy.velocity.x = -enemy.velocity.x;
    }

    if enemy.pos.x > (ctx.window_w - 32) as i32 && enemy.velocity.x > 0 as i32 {
        enemy.velocity.x = -enemy.velocity.x;
    }

    if enemy.pos.y > ctx.window_h as i32 {
        ctx.enemies.despawn(idx);
    }

    ctx.spritesheet.draw_tile(ctx.renderer, &sprite, &SDL_Rect {x: enemy.pos.x, y: enemy.pos.y, w: 32, h: 32});
}

fn update_and_render_bullet(idx: u32, ctx: &GameContext, bullet: &Bullet) {
    let sprite: Sprite = Sprite {tile_x: 2, tile_y: 0, tile_w: 1, tile_h: 1};

    (*ctx).spritesheet.draw_tile(ctx.renderer, &sprite, &SDL_Rect {x: bullet.pos.x, y: bullet.pos.y, w: 32, h: 32});

    bullet.pos.y -= BULLET_SPEED;
    if bullet.pos.y < 0 as i32 {
        ctx.bullets.despawn(idx);
    }
}

fn update_and_render_particle(idx: u32, ctx: &GameContext, particle: &Particle) {
    ctx.spritesheet.draw_tile(
        ctx.renderer,
        &Sprite {tile_x: 4, tile_y: 0, tile_w: 1, tile_h: 1},
        &SDL_Rect {x: particle.pos.x, y: particle.pos.y, w: 16, h: 16}
    );

    particle.pos.y += particle.speed;
    if particle.pos.y > ctx.window_h as i32 {
        ctx.particles.despawn(idx);
    }
}